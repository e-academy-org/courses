import{_ as e,c as a,o as s,V as t}from"./chunks/framework.BReKdyaM.js";const _=JSON.parse('{"title":"Komponensek","description":"","frontmatter":{},"headers":[],"relativePath":"komponensek.md","filePath":"komponensek.md"}'),l={name:"komponensek.md"},o=t('<h1 id="komponensek" tabindex="-1">Komponensek <a class="header-anchor" href="#komponensek" aria-label="Permalink to &quot;Komponensek&quot;">​</a></h1><p>A programcsomag komponensei</p><h2 id="desktop-applikacio-leirasa" tabindex="-1">Desktop applikáció leírása <a class="header-anchor" href="#desktop-applikacio-leirasa" aria-label="Permalink to &quot;Desktop applikáció leírása&quot;">​</a></h2><p>A Desktop applikáció egy C# alapú szoftver, melynek kezelőfelületét C# elemek segítségével fejlesztenénk. Az asztali alkalmazás mögött egy adatbázis is dolgozna, MariaDB alapú. A Desktop applikáció egy egyszerű kezelőfelülettel rendelkezne. Itt a felhasználó a termékeket tudja felvinni, illetve módosítani. A belépéshez szükséges User-t elsőként a WordPress adminisztrációs felületén kell létrehozni. A következő szinkronizációt követően (weboldal és desktop applikáció) már ugyan ez a User képes lesz belépni a desktop applikációba is.</p><h2 id="wordpress-plugin-leirasa" tabindex="-1">WordPress plugin leírása <a class="header-anchor" href="#wordpress-plugin-leirasa" aria-label="Permalink to &quot;WordPress plugin leírása&quot;">​</a></h2><p>A WordPress bővítmény felel közvetlenül az adatok szinkronizálásáért, illetve ez tartalmazná a cron beállításokat is, amelyek az adatok szinkronizálásának “automatizációjáért“, pontosabban az időbeni beállításaiért felel.</p>',6),n=[o];function i(r,p,k,d,c,m){return s(),a("div",null,n)}const h=e(l,[["render",i]]);export{_ as __pageData,h as default};
